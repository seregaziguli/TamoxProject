[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "NullPool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "NullPool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.config",
        "description": "src.core.config",
        "isExtraImport": true,
        "detail": "src.core.config",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.db.session",
        "description": "src.db.session",
        "isExtraImport": true,
        "detail": "src.db.session",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_URL",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "QUEUE_NAME",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_URL",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "QUEUE_NAME",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "ORDER_SERVICE_URL",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "importPath": "src.config_env",
        "description": "src.config_env",
        "isExtraImport": true,
        "detail": "src.config_env",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "LoginResponse",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequest",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserResponse",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequest",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequest",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequest",
        "importPath": "src.api.schemas.user",
        "description": "src.api.schemas.user",
        "isExtraImport": true,
        "detail": "src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "get_token_payload",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "str_encode",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "str_decode",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "src.core.security",
        "description": "src.core.security",
        "isExtraImport": true,
        "detail": "src.core.security",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.utils.logger",
        "description": "src.utils.logger",
        "isExtraImport": true,
        "detail": "src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.utils.logger",
        "description": "src.utils.logger",
        "isExtraImport": true,
        "detail": "src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.utils.logger",
        "description": "src.utils.logger",
        "isExtraImport": true,
        "detail": "src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.utils.logger",
        "description": "src.utils.logger",
        "isExtraImport": true,
        "detail": "src.utils.logger",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "src.api.schemas.base",
        "description": "src.api.schemas.base",
        "isExtraImport": true,
        "detail": "src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "src.api.schemas.base",
        "description": "src.api.schemas.base",
        "isExtraImport": true,
        "detail": "src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "src.api.schemas.base",
        "description": "src.api.schemas.base",
        "isExtraImport": true,
        "detail": "src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "src.api.schemas.base",
        "description": "src.api.schemas.base",
        "isExtraImport": true,
        "detail": "src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.api.schemas.token",
        "description": "src.api.schemas.token",
        "isExtraImport": true,
        "detail": "src.api.schemas.token",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "importPath": "src.api.schemas.token",
        "description": "src.api.schemas.token",
        "isExtraImport": true,
        "detail": "src.api.schemas.token",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "src.repositories.user_repository",
        "description": "src.repositories.user_repository",
        "isExtraImport": true,
        "detail": "src.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "src.repositories.user_repository",
        "description": "src.repositories.user_repository",
        "isExtraImport": true,
        "detail": "src.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "TokenRepository",
        "importPath": "src.repositories.token_repository",
        "description": "src.repositories.token_repository",
        "isExtraImport": true,
        "detail": "src.repositories.token_repository",
        "documentation": {}
    },
    {
        "label": "unique_string",
        "importPath": "src.utils.string.string_utils",
        "description": "src.utils.string.string_utils",
        "isExtraImport": true,
        "detail": "src.utils.string.string_utils",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "jsonlogger",
        "importPath": "pythonjsonlogger",
        "description": "pythonjsonlogger",
        "isExtraImport": true,
        "detail": "pythonjsonlogger",
        "documentation": {}
    },
    {
        "label": "jsonlogger",
        "importPath": "pythonjsonlogger",
        "description": "pythonjsonlogger",
        "isExtraImport": true,
        "detail": "pythonjsonlogger",
        "documentation": {}
    },
    {
        "label": "jsonlogger",
        "importPath": "pythonjsonlogger",
        "description": "pythonjsonlogger",
        "isExtraImport": true,
        "detail": "pythonjsonlogger",
        "documentation": {}
    },
    {
        "label": "jsonlogger",
        "importPath": "pythonjsonlogger",
        "description": "pythonjsonlogger",
        "isExtraImport": true,
        "detail": "pythonjsonlogger",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "src.api.routes",
        "description": "src.api.routes",
        "isExtraImport": true,
        "detail": "src.api.routes",
        "documentation": {}
    },
    {
        "label": "order",
        "importPath": "src.api.routes",
        "description": "src.api.routes",
        "isExtraImport": true,
        "detail": "src.api.routes",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "src.api.routes",
        "description": "src.api.routes",
        "isExtraImport": true,
        "detail": "src.api.routes",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.main",
        "description": "src.main",
        "isExtraImport": true,
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.main",
        "description": "src.main",
        "isExtraImport": true,
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "aio_pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aio_pika",
        "description": "aio_pika",
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aio_pika",
        "description": "aio_pika",
        "isExtraImport": true,
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "aio_pika",
        "description": "aio_pika",
        "isExtraImport": true,
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "aio_pika",
        "description": "aio_pika",
        "isExtraImport": true,
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "aio_pika",
        "description": "aio_pika",
        "isExtraImport": true,
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aio_pika",
        "description": "aio_pika",
        "isExtraImport": true,
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "aio_pika",
        "description": "aio_pika",
        "isExtraImport": true,
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "handle_order_message",
        "importPath": "src.handlers.order_handler",
        "description": "src.handlers.order_handler",
        "isExtraImport": true,
        "detail": "src.handlers.order_handler",
        "documentation": {}
    },
    {
        "label": "RabbitMQConsumer",
        "importPath": "src.handlers.order_handler",
        "description": "src.handlers.order_handler",
        "isExtraImport": true,
        "detail": "src.handlers.order_handler",
        "documentation": {}
    },
    {
        "label": "get_rabbitmq_connection",
        "importPath": "src.core.messaging",
        "description": "src.core.messaging",
        "isExtraImport": true,
        "detail": "src.core.messaging",
        "documentation": {}
    },
    {
        "label": "OrderRepository",
        "importPath": "src.repositories.order_repository",
        "description": "src.repositories.order_repository",
        "isExtraImport": true,
        "detail": "src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "OrderRepository",
        "importPath": "src.repositories.order_repository",
        "description": "src.repositories.order_repository",
        "isExtraImport": true,
        "detail": "src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "OrderRepository",
        "importPath": "src.repositories.order_repository",
        "description": "src.repositories.order_repository",
        "isExtraImport": true,
        "detail": "src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "OrderRepository",
        "importPath": "src.repositories.order_repository",
        "description": "src.repositories.order_repository",
        "isExtraImport": true,
        "detail": "src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "OrderService",
        "importPath": "src.services.order_service",
        "description": "src.services.order_service",
        "isExtraImport": true,
        "detail": "src.services.order_service",
        "documentation": {}
    },
    {
        "label": "OrderService",
        "importPath": "src.services.order_service",
        "description": "src.services.order_service",
        "isExtraImport": true,
        "detail": "src.services.order_service",
        "documentation": {}
    },
    {
        "label": "OrderService",
        "importPath": "src.services.order_service",
        "description": "src.services.order_service",
        "isExtraImport": true,
        "detail": "src.services.order_service",
        "documentation": {}
    },
    {
        "label": "consume",
        "importPath": "src.core.rabbitmq",
        "description": "src.core.rabbitmq",
        "isExtraImport": true,
        "detail": "src.core.rabbitmq",
        "documentation": {}
    },
    {
        "label": "healthcheck_router",
        "importPath": "src.api.routes.healthcheck",
        "description": "src.api.routes.healthcheck",
        "isExtraImport": true,
        "detail": "src.api.routes.healthcheck",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "OrderStatus",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "OrderStatus",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "OrderStatus",
        "importPath": "src.models.order",
        "description": "src.models.order",
        "isExtraImport": true,
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "verify_user",
        "importPath": "src.utils.user",
        "description": "src.utils.user",
        "isExtraImport": true,
        "detail": "src.utils.user",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.api.deps.order_deps",
        "description": "src.api.deps.order_deps",
        "isExtraImport": true,
        "detail": "src.api.deps.order_deps",
        "documentation": {}
    },
    {
        "label": "get_order_service",
        "importPath": "src.api.deps.order_deps",
        "description": "src.api.deps.order_deps",
        "isExtraImport": true,
        "detail": "src.api.deps.order_deps",
        "documentation": {}
    },
    {
        "label": "OrderRequest",
        "importPath": "src.api.schemas.order",
        "description": "src.api.schemas.order",
        "isExtraImport": true,
        "detail": "src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "OrderResponse",
        "importPath": "src.api.schemas.order",
        "description": "src.api.schemas.order",
        "isExtraImport": true,
        "detail": "src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "OrderRequest",
        "importPath": "src.api.schemas.order",
        "description": "src.api.schemas.order",
        "isExtraImport": true,
        "detail": "src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "OrderResponse",
        "importPath": "src.api.schemas.order",
        "description": "src.api.schemas.order",
        "isExtraImport": true,
        "detail": "src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "AddressRequest",
        "importPath": "src.api.schemas.order",
        "description": "src.api.schemas.order",
        "isExtraImport": true,
        "detail": "src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.core.conifg",
        "description": "src.core.conifg",
        "isExtraImport": true,
        "detail": "src.core.conifg",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "src.services.user_service",
        "description": "src.services.user_service",
        "isExtraImport": true,
        "detail": "src.services.user_service",
        "documentation": {}
    },
    {
        "label": "user_utils",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.auth_service.migrations.versions.8ab48113d2d1_initial_auth",
        "description": "backend.auth_service.migrations.versions.8ab48113d2d1_initial_auth",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users_auth',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('email', sa.String(length=255), nullable=False),\n    sa.Column('password', sa.String(length=100), nullable=False),\n    sa.Column('is_active', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_users_auth_email'), 'users_auth', ['email'], unique=True)",
        "detail": "backend.auth_service.migrations.versions.8ab48113d2d1_initial_auth",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.auth_service.migrations.versions.8ab48113d2d1_initial_auth",
        "description": "backend.auth_service.migrations.versions.8ab48113d2d1_initial_auth",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_user_tokens_refresh_token'), table_name='user_tokens')\n    op.drop_index(op.f('ix_user_tokens_access_token'), table_name='user_tokens')\n    op.drop_table('user_tokens')\n    op.drop_index(op.f('ix_users_auth_email'), table_name='users_auth')\n    op.drop_table('users_auth')\n    # ### end Alembic commands ###",
        "detail": "backend.auth_service.migrations.versions.8ab48113d2d1_initial_auth",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.auth_service.migrations.env",
        "description": "backend.auth_service.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.auth_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.auth_service.migrations.env",
        "description": "backend.auth_service.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "backend.auth_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.auth_service.migrations.env",
        "description": "backend.auth_service.migrations.env",
        "peekOfCode": "config = context.config\nsection = config.config_ini_section\nconfig.set_section_option(section, \"DB_NAME\", DB_NAME)\nconfig.set_section_option(section, \"DB_PORT\", DB_PORT)\nconfig.set_section_option(section, \"DB_HOST\", DB_HOST)\nconfig.set_section_option(section, \"DB_USER\", DB_USER)\nconfig.set_section_option(section, \"DB_PASS\", DB_PASS)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:",
        "detail": "backend.auth_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "backend.auth_service.migrations.env",
        "description": "backend.auth_service.migrations.env",
        "peekOfCode": "section = config.config_ini_section\nconfig.set_section_option(section, \"DB_NAME\", DB_NAME)\nconfig.set_section_option(section, \"DB_PORT\", DB_PORT)\nconfig.set_section_option(section, \"DB_HOST\", DB_HOST)\nconfig.set_section_option(section, \"DB_USER\", DB_USER)\nconfig.set_section_option(section, \"DB_PASS\", DB_PASS)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "backend.auth_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "backend.auth_service.migrations.env",
        "description": "backend.auth_service.migrations.env",
        "peekOfCode": "target_metadata = metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "backend.auth_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "backend.auth_service.src.api.routes.auth",
        "description": "backend.auth_service.src.api.routes.auth",
        "peekOfCode": "auth_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"Users\"],\n    responses={404: {\"description\": \"Not found\"}}\n)\nasync def get_auth_service(session: AsyncSession = Depends(get_async_session)) -> AuthService:\n    return AuthService(session)\n@auth_router.post(\"/login\", response_model=LoginResponse)\nasync def user_login(data: OAuth2PasswordRequestForm = Depends(), auth_service: AuthService = Depends(get_auth_service)):\n    logger.info(\"User login attempt for username: %s\", data.username)",
        "detail": "backend.auth_service.src.api.routes.auth",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.base",
        "description": "backend.auth_service.src.api.schemas.base",
        "peekOfCode": "class BaseResponse(BaseModel):\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)",
        "detail": "backend.auth_service.src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.token",
        "description": "backend.auth_service.src.api.schemas.token",
        "peekOfCode": "class UserToken(BaseResponse):\n    id: int\n    access_token: str\n    refresh_token: str\n    expires_at: Any\nclass TokenResponse(BaseResponse):\n    access_token: str\n    refresh_token: str\n    expires_at: Any",
        "detail": "backend.auth_service.src.api.schemas.token",
        "documentation": {}
    },
    {
        "label": "TokenResponse",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.token",
        "description": "backend.auth_service.src.api.schemas.token",
        "peekOfCode": "class TokenResponse(BaseResponse):\n    access_token: str\n    refresh_token: str\n    expires_at: Any",
        "detail": "backend.auth_service.src.api.schemas.token",
        "documentation": {}
    },
    {
        "label": "LoginResponse",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.user",
        "description": "backend.auth_service.src.api.schemas.user",
        "peekOfCode": "class LoginResponse(BaseResponse):\n    access_token: str\n    refresh_token: str\n    expires_at: Any\n    token_type: str = \"Bearer\"\nclass RegisterUserRequest(BaseResponse):\n    name: str\n    email: EmailStr\n    password: str\n    phone_number: str",
        "detail": "backend.auth_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequest",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.user",
        "description": "backend.auth_service.src.api.schemas.user",
        "peekOfCode": "class RegisterUserRequest(BaseResponse):\n    name: str\n    email: EmailStr\n    password: str\n    phone_number: str\nclass RegisterUserResponse(BaseResponse):\n    id: int\n    name: str\n    email: EmailStr\n    phone_number: str",
        "detail": "backend.auth_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserResponse",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.user",
        "description": "backend.auth_service.src.api.schemas.user",
        "peekOfCode": "class RegisterUserResponse(BaseResponse):\n    id: int\n    name: str\n    email: EmailStr\n    phone_number: str\n    # tokens: Dict[str, Any]\nclass UserBase(BaseModel):\n    email: str\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None",
        "detail": "backend.auth_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.user",
        "description": "backend.auth_service.src.api.schemas.user",
        "peekOfCode": "class UserBase(BaseModel):\n    email: str\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\nclass User(UserBase):\n    id: int\n    is_active: bool\n    tokens: List[UserToken]\n    class Config:\n        orm_mode = True",
        "detail": "backend.auth_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.auth_service.src.api.schemas.user",
        "description": "backend.auth_service.src.api.schemas.user",
        "peekOfCode": "class User(UserBase):\n    id: int\n    is_active: bool\n    tokens: List[UserToken]\n    class Config:\n        orm_mode = True",
        "detail": "backend.auth_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.auth_service.src.core.config",
        "description": "backend.auth_service.src.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_NAME: str\n    DB_PORT: int\n    DB_HOST: str\n    DB_USER: str\n    DB_PASS: str\n    TEST_DB_NAME: str\n    TEST_DB_PORT: int\n    TEST_DB_HOST: str\n    TEST_DB_USER: str",
        "detail": "backend.auth_service.src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.config",
        "description": "backend.auth_service.src.core.config",
        "peekOfCode": "def settings() -> Settings:\n    return Settings()",
        "detail": "backend.auth_service.src.core.config",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "is_password_strong_enough",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    if not any(char in SPECIAL_CHARACTERS for char in password):",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "str_encode",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def str_encode(string: str) -> str:\n    return base64.b85encode(string.encode('ascii')).decode('ascii')\ndef str_decode(string: str) -> str:\n    return base64.b85decode(string.encode('ascii')).decode('ascii')\ndef get_token_payload(token: str, secret: str, algo: str):\n    try:\n        payload = jwt.decode(token, secret, algorithms=algo)\n    except Exception as jwt_exec:\n        logger.info(f\"JWT Error: {str(jwt_exec)}\")\n        payload = None",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "str_decode",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def str_decode(string: str) -> str:\n    return base64.b85decode(string.encode('ascii')).decode('ascii')\ndef get_token_payload(token: str, secret: str, algo: str):\n    try:\n        payload = jwt.decode(token, secret, algorithms=algo)\n    except Exception as jwt_exec:\n        logger.info(f\"JWT Error: {str(jwt_exec)}\")\n        payload = None\n    return payload\ndef generate_token(payload: dict, secret: str, algo: str, expiry: timedelta):",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "get_token_payload",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def get_token_payload(token: str, secret: str, algo: str):\n    try:\n        payload = jwt.decode(token, secret, algorithms=algo)\n    except Exception as jwt_exec:\n        logger.info(f\"JWT Error: {str(jwt_exec)}\")\n        payload = None\n    return payload\ndef generate_token(payload: dict, secret: str, algo: str, expiry: timedelta):\n    expire = datetime.utcnow() + expiry\n    payload.update({\"exp\": expire})",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "kind": 2,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "def generate_token(payload: dict, secret: str, algo: str, expiry: timedelta):\n    expire = datetime.utcnow() + expiry\n    payload.update({\"exp\": expire})\n    return jwt.encode(payload, secret, algorithm=algo)\nasync def load_user(email: str, session: AsyncSession) -> User | None:\n    try:\n        result = await session.execute(select(User).where(User.email == email))\n        user = result.scalar_one_or_none()\n    except Exception as user_exec:\n        logger.info(f\"Error loading user: {user_exec}; Email: {email}\")",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "logger = logging.getLogger('uvicorn.error')\nSPECIAL_CHARACTERS = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|', '~', '>']\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\napp_settings = settings()\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "SPECIAL_CHARACTERS",
        "kind": 5,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "SPECIAL_CHARACTERS = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|', '~', '>']\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\napp_settings = settings()\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\napp_settings = settings()\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):\n        return False",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\napp_settings = settings()\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):\n        return False\n    if not any(char.isupper() for char in password):",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "app_settings",
        "kind": 5,
        "importPath": "backend.auth_service.src.core.security",
        "description": "backend.auth_service.src.core.security",
        "peekOfCode": "app_settings = settings()\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password < 5):\n        return False\n    if not any(char.isupper() for char in password):\n        return False",
        "detail": "backend.auth_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "backend.auth_service.src.db.session",
        "description": "backend.auth_service.src.db.session",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\nmetadata = Base.metadata\nengine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.auth_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "backend.auth_service.src.db.session",
        "description": "backend.auth_service.src.db.session",
        "peekOfCode": "metadata = Base.metadata\nengine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.auth_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.auth_service.src.db.session",
        "description": "backend.auth_service.src.db.session",
        "peekOfCode": "engine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.auth_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "backend.auth_service.src.db.session",
        "description": "backend.auth_service.src.db.session",
        "peekOfCode": "async_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.auth_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.auth_service.src.models.user",
        "description": "backend.auth_service.src.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users_auth\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    email = Column(String(255), unique=True, index=True, nullable=False)\n    password = Column(String(100), nullable=False)\n    is_active = Column(Boolean, default=False)\n    tokens = relationship(\"UserToken\", back_populates=\"user\")\n    @classmethod\n    async def get_user_with_tokens(cls, session: AsyncSession, user_id: int):\n        stmt = select(cls).options(",
        "detail": "backend.auth_service.src.models.user",
        "documentation": {}
    },
    {
        "label": "UserToken",
        "kind": 6,
        "importPath": "backend.auth_service.src.models.user",
        "description": "backend.auth_service.src.models.user",
        "peekOfCode": "class UserToken(Base):\n    __tablename__ = \"user_tokens\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, ForeignKey('users_auth.id'), nullable=False)\n    access_token = Column(String(250), nullable=True, index=True)\n    refresh_token = Column(String(250), nullable=True, index=True)\n    expires_at = Column(DateTime, nullable=False)\n    user = relationship(\"User\", back_populates=\"tokens\")\n    @classmethod\n    async def get_token_with_user(cls, session: AsyncSession, token_id: int):",
        "detail": "backend.auth_service.src.models.user",
        "documentation": {}
    },
    {
        "label": "TokenRepository",
        "kind": 6,
        "importPath": "backend.auth_service.src.repositories.token_repository",
        "description": "backend.auth_service.src.repositories.token_repository",
        "peekOfCode": "class TokenRepository:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n    async def add_token(self, user_token: UserToken) -> None:\n        self.session.add(user_token)\n        await self.session.commit()\n    async def get_user_token(self, refresh_token: str, access_token: str, user_id: str) -> UserToken:\n        stmt = select(UserToken).options(\n            joinedload(UserToken.user)\n        ).filter(",
        "detail": "backend.auth_service.src.repositories.token_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "backend.auth_service.src.repositories.user_repository",
        "description": "backend.auth_service.src.repositories.user_repository",
        "peekOfCode": "class UserRepository:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n    async def get_user_by_email(self, email: str) -> Optional[User]:\n        stmt = select(User).options(\n            selectinload(User.tokens)\n        ).where(User.email == email)\n        result = await self.session.execute(stmt)\n        return result.scalars().first()",
        "detail": "backend.auth_service.src.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "backend.auth_service.src.services.auth_service",
        "description": "backend.auth_service.src.services.auth_service",
        "peekOfCode": "class AuthService:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n        self.user_repo = UserRepository(session)\n        self.token_repo = TokenRepository(session)\n    async def authenticate_user(self, email: str, password: str) -> Optional[UserTokenPydantic]:\n        logger.info(\"Authenticating user with email: %s\", email)\n        user = await self.user_repo.get_user_by_email(email)\n        if user and verify_password(password, user.password):\n            logger.info(\"User authenticated successfully: %s\", email)",
        "detail": "backend.auth_service.src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "ExternalUserService",
        "kind": 6,
        "importPath": "backend.auth_service.src.services.user_service",
        "description": "backend.auth_service.src.services.user_service",
        "peekOfCode": "class ExternalUserService:\n    async def get_user_from_registration_service(self, email: str) -> dict:\n        async with httpx.AsyncClient() as client:\n            try:\n                response = await client.get(f\"http://registration_service:8000/users/{email}\")\n                if response.status_code == 200:\n                    return response.json()\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=\"Error communicating with registration service\")",
        "detail": "backend.auth_service.src.services.user_service",
        "documentation": {}
    },
    {
        "label": "unique_string",
        "kind": 2,
        "importPath": "backend.auth_service.src.utils.string.string_utils",
        "description": "backend.auth_service.src.utils.string.string_utils",
        "peekOfCode": "def unique_string(byte: int = 8) -> str:\n    return secrets.token_urlsafe(byte)",
        "detail": "backend.auth_service.src.utils.string.string_utils",
        "documentation": {}
    },
    {
        "label": "CustomJsonFormatter",
        "kind": 6,
        "importPath": "backend.auth_service.src.utils.logger",
        "description": "backend.auth_service.src.utils.logger",
        "peekOfCode": "class CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:\n            log_record[\"level\"] = record.levelname",
        "detail": "backend.auth_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.auth_service.src.utils.logger",
        "description": "backend.auth_service.src.utils.logger",
        "peekOfCode": "logger = logging.getLogger()\nlogHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()",
        "detail": "backend.auth_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logHandler",
        "kind": 5,
        "importPath": "backend.auth_service.src.utils.logger",
        "description": "backend.auth_service.src.utils.logger",
        "peekOfCode": "logHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:",
        "detail": "backend.auth_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "backend.auth_service.src.utils.logger",
        "description": "backend.auth_service.src.utils.logger",
        "peekOfCode": "formatter = CustomJsonFormatter(\n    \"%(timestamp)s %(level)s %(message)s %(module)s %(funcName)s\"\n)\nlogHandler.setFormatter(formatter)\nlogger.addHandler(logHandler)\nlogger.setLevel(settings().LOG_LEVEL)",
        "detail": "backend.auth_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "backend.auth_service.src.config_env",
        "description": "backend.auth_service.src.config_env",
        "peekOfCode": "DB_NAME = os.environ.get(\"POSTGRES_DB\")\nDB_PORT = os.environ.get(\"POSTGRES_PORT\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.auth_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "kind": 5,
        "importPath": "backend.auth_service.src.config_env",
        "description": "backend.auth_service.src.config_env",
        "peekOfCode": "DB_PORT = os.environ.get(\"POSTGRES_PORT\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.auth_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "backend.auth_service.src.config_env",
        "description": "backend.auth_service.src.config_env",
        "peekOfCode": "DB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.auth_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "backend.auth_service.src.config_env",
        "description": "backend.auth_service.src.config_env",
        "peekOfCode": "DB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.auth_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "kind": 5,
        "importPath": "backend.auth_service.src.config_env",
        "description": "backend.auth_service.src.config_env",
        "peekOfCode": "DB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.auth_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"MODE\"]",
        "kind": 5,
        "importPath": "backend.auth_service.src.conftest",
        "description": "backend.auth_service.src.conftest",
        "peekOfCode": "os.environ[\"MODE\"] = \"TEST\"",
        "detail": "backend.auth_service.src.conftest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.auth_service.src.main",
        "description": "backend.auth_service.src.main",
        "peekOfCode": "app = FastAPI()\norigins = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    \"http://localhost:8500\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "backend.auth_service.src.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.auth_service.src.main",
        "description": "backend.auth_service.src.main",
        "peekOfCode": "origins = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    \"http://localhost:8500\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "backend.auth_service.src.main",
        "documentation": {}
    },
    {
        "label": "test_abc",
        "kind": 2,
        "importPath": "backend.auth_service.tests.unit_tests.test_users.test_api",
        "description": "backend.auth_service.tests.unit_tests.test_users.test_api",
        "peekOfCode": "def test_abc():\n    assert 1 == 1",
        "detail": "backend.auth_service.tests.unit_tests.test_users.test_api",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "backend.auth_service.tests.conftest",
        "description": "backend.auth_service.tests.conftest",
        "peekOfCode": "def event_loop(request):\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"function\")\nasync def ac():\n    async with AsyncClient(app=fastapi_app, base_url=\"http://test\") as ac:\n        yield ac\n@pytest.fixture(scope=\"function\")\nasync def session():",
        "detail": "backend.auth_service.tests.conftest",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.auth_service.venv.bin.jp",
        "description": "backend.auth_service.venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "backend.auth_service.venv.bin.jp",
        "documentation": {}
    },
    {
        "label": "healthcheck_router",
        "kind": 5,
        "importPath": "backend.order_management_service.src.api.routes.healthcheck",
        "description": "backend.order_management_service.src.api.routes.healthcheck",
        "peekOfCode": "healthcheck_router = APIRouter()\n@healthcheck_router.get(\"/healthcheck\")\nasync def healthcheck():\n    return {\"status\": \"healthy\"}",
        "detail": "backend.order_management_service.src.api.routes.healthcheck",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.order_management_service.src.core.config",
        "description": "backend.order_management_service.src.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    MODE: Literal[\"DEV\", \"TEST\", \"PROD\"] = \"DEV\"\n    LOG_LEVEL: str = \"INFO\"\n    class Config:\n        env_file = \".env\"\n        extra = \"allow\"\n@lru_cache()\ndef settings() -> Settings:\n    return Settings()",
        "detail": "backend.order_management_service.src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "backend.order_management_service.src.core.config",
        "description": "backend.order_management_service.src.core.config",
        "peekOfCode": "def settings() -> Settings:\n    return Settings()",
        "detail": "backend.order_management_service.src.core.config",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_management_service.src.core.rabbitmq",
        "description": "backend.order_management_service.src.core.rabbitmq",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def handle_message(message: IncomingMessage):\n    async with message.process():\n        order_info = message.body.decode()\n        logging.info(f\"Got message: {order_info}\")\n        await handle_order_message(order_info)\nasync def consume():\n    connection = await connect(RABBITMQ_URL)\n    channel = await connection.channel()\n    queue = await channel.declare_queue(QUEUE_NAME, durable=True)",
        "detail": "backend.order_management_service.src.core.rabbitmq",
        "documentation": {}
    },
    {
        "label": "RabbitMQConsumer",
        "kind": 6,
        "importPath": "backend.order_management_service.src.handlers.order_handler",
        "description": "backend.order_management_service.src.handlers.order_handler",
        "peekOfCode": "class RabbitMQConsumer:\n    def __init__(self, rabbitmq_url: str, queue_name: str):\n        self.rabbitmq_url = rabbitmq_url\n        self.queue_name = queue_name\n    async def start(self):\n        connection = await get_rabbitmq_connection(self.rabbitmq_url)\n        async with connection:\n            channel = await connection.channel()\n            queue = await channel.declare_queue(self.queue_name, durable=True)\n            async for message in queue:",
        "detail": "backend.order_management_service.src.handlers.order_handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_management_service.src.handlers.order_handler",
        "description": "backend.order_management_service.src.handlers.order_handler",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def handle_order_message(order_info: str) -> None:\n    try:\n        order_data = json.loads(order_info)\n        order_id = order_data.get(\"order_id\")\n        new_status = order_data.get(\"new_status\")\n        assigned_provider = order_data.get(\"assigned_provider\")\n        new_scheduled_date = order_data.get(\"scheduled_date\")\n        if not order_id:\n            logger.error(\"Order id not found in message. Message: %s\", order_data)",
        "detail": "backend.order_management_service.src.handlers.order_handler",
        "documentation": {}
    },
    {
        "label": "OrderRepository",
        "kind": 6,
        "importPath": "backend.order_management_service.src.repositories.order_repository",
        "description": "backend.order_management_service.src.repositories.order_repository",
        "peekOfCode": "class OrderRepository:\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n    async def get_order_by_id(self, order_id: int) -> dict:\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(f\"{self.base_url}/orders/{order_id}\")\n                response.raise_for_status()\n                return response.json()\n        except httpx.HTTPStatusError as e:",
        "detail": "backend.order_management_service.src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_management_service.src.repositories.order_repository",
        "description": "backend.order_management_service.src.repositories.order_repository",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass OrderRepository:\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n    async def get_order_by_id(self, order_id: int) -> dict:\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(f\"{self.base_url}/orders/{order_id}\")\n                response.raise_for_status()\n                return response.json()",
        "detail": "backend.order_management_service.src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "OrderService",
        "kind": 6,
        "importPath": "backend.order_management_service.src.services.order_service",
        "description": "backend.order_management_service.src.services.order_service",
        "peekOfCode": "class OrderService:\n    def __init__(self, order_repository: OrderRepository):\n        self.order_repository = order_repository\n    async def get_order_by_id(self, order_id: int) -> dict:\n        return await self.order_repository.get_order_by_id(order_id)\n    async def update_order(self, order_id: int, order_data: dict) -> None:\n        await self.order_repository.update_order(order_id, order_data)",
        "detail": "backend.order_management_service.src.services.order_service",
        "documentation": {}
    },
    {
        "label": "CustomJsonFormatter",
        "kind": 6,
        "importPath": "backend.order_management_service.src.utils.logger",
        "description": "backend.order_management_service.src.utils.logger",
        "peekOfCode": "class CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:\n            log_record[\"level\"] = record.levelname",
        "detail": "backend.order_management_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_management_service.src.utils.logger",
        "description": "backend.order_management_service.src.utils.logger",
        "peekOfCode": "logger = logging.getLogger()\nlogHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()",
        "detail": "backend.order_management_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logHandler",
        "kind": 5,
        "importPath": "backend.order_management_service.src.utils.logger",
        "description": "backend.order_management_service.src.utils.logger",
        "peekOfCode": "logHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:",
        "detail": "backend.order_management_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "backend.order_management_service.src.utils.logger",
        "description": "backend.order_management_service.src.utils.logger",
        "peekOfCode": "formatter = CustomJsonFormatter(\n    \"%(timestamp)s %(level)s %(message)s %(module)s %(funcName)s\"\n)\nlogHandler.setFormatter(formatter)\nlogger.addHandler(logHandler)\nlogger.setLevel(settings().LOG_LEVEL)",
        "detail": "backend.order_management_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_URL",
        "kind": 5,
        "importPath": "backend.order_management_service.src.config_env",
        "description": "backend.order_management_service.src.config_env",
        "peekOfCode": "RABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\")\nQUEUE_NAME = os.environ.get(\"QUEUE_NAME\")\nORDER_SERVICE_URL = os.environ.get(\"ORDER_SERVICE_URL\")",
        "detail": "backend.order_management_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "QUEUE_NAME",
        "kind": 5,
        "importPath": "backend.order_management_service.src.config_env",
        "description": "backend.order_management_service.src.config_env",
        "peekOfCode": "QUEUE_NAME = os.environ.get(\"QUEUE_NAME\")\nORDER_SERVICE_URL = os.environ.get(\"ORDER_SERVICE_URL\")",
        "detail": "backend.order_management_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "ORDER_SERVICE_URL",
        "kind": 5,
        "importPath": "backend.order_management_service.src.config_env",
        "description": "backend.order_management_service.src.config_env",
        "peekOfCode": "ORDER_SERVICE_URL = os.environ.get(\"ORDER_SERVICE_URL\")",
        "detail": "backend.order_management_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_management_service.src.main",
        "description": "backend.order_management_service.src.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\norder_repository = OrderRepository(base_url=ORDER_SERVICE_URL)\norder_service = OrderService(order_repository=order_repository)\n@asynccontextmanager\nasync def lifespan(app: FastAPI) -> AsyncIterator[None]:\n    logger.info(\"Starting lifespan...\")\n    consumer = RabbitMQConsumer(RABBITMQ_URL, QUEUE_NAME)\n    task = asyncio.create_task(consumer.start())\n    try:\n        yield",
        "detail": "backend.order_management_service.src.main",
        "documentation": {}
    },
    {
        "label": "order_repository",
        "kind": 5,
        "importPath": "backend.order_management_service.src.main",
        "description": "backend.order_management_service.src.main",
        "peekOfCode": "order_repository = OrderRepository(base_url=ORDER_SERVICE_URL)\norder_service = OrderService(order_repository=order_repository)\n@asynccontextmanager\nasync def lifespan(app: FastAPI) -> AsyncIterator[None]:\n    logger.info(\"Starting lifespan...\")\n    consumer = RabbitMQConsumer(RABBITMQ_URL, QUEUE_NAME)\n    task = asyncio.create_task(consumer.start())\n    try:\n        yield\n    finally:",
        "detail": "backend.order_management_service.src.main",
        "documentation": {}
    },
    {
        "label": "order_service",
        "kind": 5,
        "importPath": "backend.order_management_service.src.main",
        "description": "backend.order_management_service.src.main",
        "peekOfCode": "order_service = OrderService(order_repository=order_repository)\n@asynccontextmanager\nasync def lifespan(app: FastAPI) -> AsyncIterator[None]:\n    logger.info(\"Starting lifespan...\")\n    consumer = RabbitMQConsumer(RABBITMQ_URL, QUEUE_NAME)\n    task = asyncio.create_task(consumer.start())\n    try:\n        yield\n    finally:\n        logger.info(\"Cleaning up lifespan...\")",
        "detail": "backend.order_management_service.src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.order_management_service.src.main",
        "description": "backend.order_management_service.src.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\norigins = [\n    \"http://localhost\",\n    \"http://localhost:8002\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,",
        "detail": "backend.order_management_service.src.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.order_management_service.src.main",
        "description": "backend.order_management_service.src.main",
        "peekOfCode": "origins = [\n    \"http://localhost\",\n    \"http://localhost:8002\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "backend.order_management_service.src.main",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.order_service.migrations.versions.46fe7eee8c86_initial",
        "description": "backend.order_service.migrations.versions.46fe7eee8c86_initial",
        "peekOfCode": "def upgrade() -> None:\n    # ### creating address table\n    op.create_table(\n        'addresses',\n        sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),\n        sa.Column('street', sa.String(), nullable=False),\n        sa.Column('city', sa.String(), nullable=False),\n        sa.Column('zip_code', sa.String(), nullable=False)\n    )\n    # ### creating order table",
        "detail": "backend.order_service.migrations.versions.46fe7eee8c86_initial",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.order_service.migrations.versions.46fe7eee8c86_initial",
        "description": "backend.order_service.migrations.versions.46fe7eee8c86_initial",
        "peekOfCode": "def downgrade() -> None:\n    # ### drop order table\n    op.drop_table('orders')\n    # ### drop address table\n    op.drop_table('addresses')\n    # ### drop ENUM type if used in PostgreSQL\n    op.execute('DROP TYPE orderstatus')",
        "detail": "backend.order_service.migrations.versions.46fe7eee8c86_initial",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.order_service.migrations.env",
        "description": "backend.order_service.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.order_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.order_service.migrations.env",
        "description": "backend.order_service.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "backend.order_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.order_service.migrations.env",
        "description": "backend.order_service.migrations.env",
        "peekOfCode": "config = context.config\nsection = config.config_ini_section\nconfig.set_section_option(section, \"DB_NAME\", DB_NAME)\nconfig.set_section_option(section, \"DB_PORT\", DB_PORT)\nconfig.set_section_option(section, \"DB_HOST\", DB_HOST)\nconfig.set_section_option(section, \"DB_USER\", DB_USER)\nconfig.set_section_option(section, \"DB_PASS\", DB_PASS)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:",
        "detail": "backend.order_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "backend.order_service.migrations.env",
        "description": "backend.order_service.migrations.env",
        "peekOfCode": "section = config.config_ini_section\nconfig.set_section_option(section, \"DB_NAME\", DB_NAME)\nconfig.set_section_option(section, \"DB_PORT\", DB_PORT)\nconfig.set_section_option(section, \"DB_HOST\", DB_HOST)\nconfig.set_section_option(section, \"DB_USER\", DB_USER)\nconfig.set_section_option(section, \"DB_PASS\", DB_PASS)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "backend.order_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "backend.order_service.migrations.env",
        "description": "backend.order_service.migrations.env",
        "peekOfCode": "target_metadata = metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "backend.order_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "order_router",
        "kind": 5,
        "importPath": "backend.order_service.src.api.routes.order",
        "description": "backend.order_service.src.api.routes.order",
        "peekOfCode": "order_router = APIRouter(\n    prefix=\"/orders\",\n    tags=[\"Orders\"],\n    responses={404: {\"description\": \"Not found\"}}\n)\n@order_router.post(\"/\", response_model=OrderResponse, status_code=status.HTTP_201_CREATED)\nasync def create_order(\n    order: OrderRequest,\n    user: dict = Depends(get_current_user),\n    order_service: OrderService = Depends(get_order_service)",
        "detail": "backend.order_service.src.api.routes.order",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "backend.order_service.src.api.schemas.base",
        "description": "backend.order_service.src.api.schemas.base",
        "peekOfCode": "class BaseResponse(BaseModel):\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)",
        "detail": "backend.order_service.src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "AddressRequest",
        "kind": 6,
        "importPath": "backend.order_service.src.api.schemas.order",
        "description": "backend.order_service.src.api.schemas.order",
        "peekOfCode": "class AddressRequest(BaseResponse):\n    street: str\n    city: str\n    zip_code: str\nclass OrderResponse(BaseResponse):\n    id: int\n    description: str\n    service_type_name: str\n    address: AddressRequest\n    scheduled_date: datetime",
        "detail": "backend.order_service.src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "OrderResponse",
        "kind": 6,
        "importPath": "backend.order_service.src.api.schemas.order",
        "description": "backend.order_service.src.api.schemas.order",
        "peekOfCode": "class OrderResponse(BaseResponse):\n    id: int\n    description: str\n    service_type_name: str\n    address: AddressRequest\n    scheduled_date: datetime\n    status: str\nclass OrderRequest(BaseResponse):\n    description: str\n    service_type_name: str ",
        "detail": "backend.order_service.src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "OrderRequest",
        "kind": 6,
        "importPath": "backend.order_service.src.api.schemas.order",
        "description": "backend.order_service.src.api.schemas.order",
        "peekOfCode": "class OrderRequest(BaseResponse):\n    description: str\n    service_type_name: str \n    address: AddressRequest\n    scheduled_date: Optional[datetime] = None",
        "detail": "backend.order_service.src.api.schemas.order",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.order_service.src.core.conifg",
        "description": "backend.order_service.src.core.conifg",
        "peekOfCode": "class Settings(BaseSettings):\n    MODE: Literal[\"DEV\", \"TEST\", \"PROD\"] = \"DEV\"\n    LOG_LEVEL: str = \"INFO\"\n    class Config:\n        env_file = \".env\"\n        extra = \"allow\"\n@lru_cache()\ndef settings() -> Settings:\n    return Settings()",
        "detail": "backend.order_service.src.core.conifg",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "backend.order_service.src.core.conifg",
        "description": "backend.order_service.src.core.conifg",
        "peekOfCode": "def settings() -> Settings:\n    return Settings()",
        "detail": "backend.order_service.src.core.conifg",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "backend.order_service.src.db.session",
        "description": "backend.order_service.src.db.session",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\nmetadata = Base.metadata\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.order_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "backend.order_service.src.db.session",
        "description": "backend.order_service.src.db.session",
        "peekOfCode": "DATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\nclass Base(DeclarativeBase):\n    pass\nmetadata = Base.metadata\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.order_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "backend.order_service.src.db.session",
        "description": "backend.order_service.src.db.session",
        "peekOfCode": "metadata = Base.metadata\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.order_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.order_service.src.db.session",
        "description": "backend.order_service.src.db.session",
        "peekOfCode": "engine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.order_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "backend.order_service.src.db.session",
        "description": "backend.order_service.src.db.session",
        "peekOfCode": "async_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.order_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "OrderStatus",
        "kind": 6,
        "importPath": "backend.order_service.src.models.order",
        "description": "backend.order_service.src.models.order",
        "peekOfCode": "class OrderStatus(enum.Enum):\n    NEW = \"NEW\"\n    IN_PROGRESS = \"IN PROGRESS\"\n    COMPLETED = \"COMPLETED\"\n    CANCELLED = \"CANCELLED\"\nclass Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, nullable=False)  \n    description = Column(Text, nullable=False)  ",
        "detail": "backend.order_service.src.models.order",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "backend.order_service.src.models.order",
        "description": "backend.order_service.src.models.order",
        "peekOfCode": "class Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, nullable=False)  \n    description = Column(Text, nullable=False)  \n    service_type_name = Column(String, nullable=False)  \n    address_id = Column(Integer, ForeignKey('addresses.id'), nullable=False) \n    scheduled_date = Column(DateTime, nullable=False) \n    created_at = Column(DateTime, nullable=False, server_default=func.now()) \n    status = Column(Enum(OrderStatus), default=OrderStatus.NEW, nullable=False)",
        "detail": "backend.order_service.src.models.order",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "backend.order_service.src.models.order",
        "description": "backend.order_service.src.models.order",
        "peekOfCode": "class Address(Base):\n    __tablename__ = \"addresses\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    street = Column(String, nullable=False)\n    city = Column(String, nullable=False)\n    zip_code = Column(String, nullable=False)\n    orders = relationship(\"Order\", back_populates=\"address\")",
        "detail": "backend.order_service.src.models.order",
        "documentation": {}
    },
    {
        "label": "OrderRepository",
        "kind": 6,
        "importPath": "backend.order_service.src.repositories.order_repository",
        "description": "backend.order_service.src.repositories.order_repository",
        "peekOfCode": "class OrderRepository:\n    def __init__(self, db: AsyncSession):\n        self.db = db\n    async def create_order(self, order_data: dict, address_data: dict) -> Order:\n        new_address = Address(**address_data)\n        self.db.add(new_address)\n        await self.db.commit()\n        await self.db.refresh(new_address)\n        new_order = Order(**order_data, address_id=new_address.id)\n        self.db.add(new_order)",
        "detail": "backend.order_service.src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_service.src.repositories.order_repository",
        "description": "backend.order_service.src.repositories.order_repository",
        "peekOfCode": "logger = logging.getLogger('socketio')\nclass OrderRepository:\n    def __init__(self, db: AsyncSession):\n        self.db = db\n    async def create_order(self, order_data: dict, address_data: dict) -> Order:\n        new_address = Address(**address_data)\n        self.db.add(new_address)\n        await self.db.commit()\n        await self.db.refresh(new_address)\n        new_order = Order(**order_data, address_id=new_address.id)",
        "detail": "backend.order_service.src.repositories.order_repository",
        "documentation": {}
    },
    {
        "label": "OrderService",
        "kind": 6,
        "importPath": "backend.order_service.src.services.order_service",
        "description": "backend.order_service.src.services.order_service",
        "peekOfCode": "class OrderService:\n    def __init__(self, order_repository: OrderRepository):\n        self.order_repository = order_repository\n    async def create_order(self, order: OrderRequest, user: dict) -> OrderResponse:\n        try:\n            address_data = order.address.dict()\n            scheduled_date_with_tz = datetime.now(timezone.utc)\n            scheduled_date_naive = scheduled_date_with_tz.replace(tzinfo=None)\n            order_data = {\n                \"user_id\": user[\"id\"],",
        "detail": "backend.order_service.src.services.order_service",
        "documentation": {}
    },
    {
        "label": "CustomJsonFormatter",
        "kind": 6,
        "importPath": "backend.order_service.src.utils.logger",
        "description": "backend.order_service.src.utils.logger",
        "peekOfCode": "class CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:\n            log_record[\"level\"] = record.levelname",
        "detail": "backend.order_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_service.src.utils.logger",
        "description": "backend.order_service.src.utils.logger",
        "peekOfCode": "logger = logging.getLogger()\nlogHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()",
        "detail": "backend.order_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logHandler",
        "kind": 5,
        "importPath": "backend.order_service.src.utils.logger",
        "description": "backend.order_service.src.utils.logger",
        "peekOfCode": "logHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:",
        "detail": "backend.order_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "backend.order_service.src.utils.logger",
        "description": "backend.order_service.src.utils.logger",
        "peekOfCode": "formatter = CustomJsonFormatter(\n    \"%(timestamp)s %(level)s %(message)s %(module)s %(funcName)s\"\n)\nlogHandler.setFormatter(formatter)\nlogger.addHandler(logHandler)\nlogger.setLevel(settings().LOG_LEVEL)",
        "detail": "backend.order_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.order_service.src.utils.user",
        "description": "backend.order_service.src.utils.user",
        "peekOfCode": "logger = logging.getLogger('socketio')\nasync def verify_user(access_token: str = Header(...)):\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(\n                \"http://auth_service:8000/users/me\",\n                headers={\"Authorization\": f\"Bearer {access_token}\"}\n            )\n            logging.info(response.status_code)\n            if response.status_code == 200:",
        "detail": "backend.order_service.src.utils.user",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "backend.order_service.src.config_env",
        "description": "backend.order_service.src.config_env",
        "peekOfCode": "DB_NAME = os.environ.get(\"POSTGRES_DB\")\nDB_PORT = os.environ.get(\"POSTGRES_PORT\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")\nRABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\") or \"amqp://guest:guest_pass@rabbitmq:5672/\"",
        "detail": "backend.order_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "kind": 5,
        "importPath": "backend.order_service.src.config_env",
        "description": "backend.order_service.src.config_env",
        "peekOfCode": "DB_PORT = os.environ.get(\"POSTGRES_PORT\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")\nRABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\") or \"amqp://guest:guest_pass@rabbitmq:5672/\"",
        "detail": "backend.order_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "backend.order_service.src.config_env",
        "description": "backend.order_service.src.config_env",
        "peekOfCode": "DB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")\nRABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\") or \"amqp://guest:guest_pass@rabbitmq:5672/\"",
        "detail": "backend.order_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "backend.order_service.src.config_env",
        "description": "backend.order_service.src.config_env",
        "peekOfCode": "DB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")\nRABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\") or \"amqp://guest:guest_pass@rabbitmq:5672/\"",
        "detail": "backend.order_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "kind": 5,
        "importPath": "backend.order_service.src.config_env",
        "description": "backend.order_service.src.config_env",
        "peekOfCode": "DB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")\nRABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\") or \"amqp://guest:guest_pass@rabbitmq:5672/\"",
        "detail": "backend.order_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_URL",
        "kind": 5,
        "importPath": "backend.order_service.src.config_env",
        "description": "backend.order_service.src.config_env",
        "peekOfCode": "RABBITMQ_URL = os.environ.get(\"RABBITMQ_URL\") or \"amqp://guest:guest_pass@rabbitmq:5672/\"",
        "detail": "backend.order_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.order_service.src.main",
        "description": "backend.order_service.src.main",
        "peekOfCode": "app = FastAPI()\norigins = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    # \"http://localhost:8500\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "backend.order_service.src.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.order_service.src.main",
        "description": "backend.order_service.src.main",
        "peekOfCode": "origins = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    # \"http://localhost:8500\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "backend.order_service.src.main",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.41cb2ce1f6bf_added_email_password_3",
        "description": "backend.registration_service.migrations.versions.41cb2ce1f6bf_added_email_password_3",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('users_register', 'email',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.alter_column('users_register', 'password',\n               existing_type=sa.VARCHAR(length=100),\n               nullable=True)\n    # ### end Alembic commands ###\ndef downgrade() -> None:",
        "detail": "backend.registration_service.migrations.versions.41cb2ce1f6bf_added_email_password_3",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.41cb2ce1f6bf_added_email_password_3",
        "description": "backend.registration_service.migrations.versions.41cb2ce1f6bf_added_email_password_3",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('users_register', 'password',\n               existing_type=sa.VARCHAR(length=100),\n               nullable=True)\n    op.alter_column('users_register', 'email',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.create_table('user_tokens',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),",
        "detail": "backend.registration_service.migrations.versions.41cb2ce1f6bf_added_email_password_3",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.4e9c51686ff0_removed_password",
        "description": "backend.registration_service.migrations.versions.4e9c51686ff0_removed_password",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('users_register', 'email',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.drop_column('users_register', 'password')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users_register', sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=True))",
        "detail": "backend.registration_service.migrations.versions.4e9c51686ff0_removed_password",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.4e9c51686ff0_removed_password",
        "description": "backend.registration_service.migrations.versions.4e9c51686ff0_removed_password",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users_register', sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=True))\n    op.alter_column('users_register', 'email',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.create_table('user_tokens',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),\n    sa.Column('access_key', sa.VARCHAR(length=250), autoincrement=False, nullable=True),",
        "detail": "backend.registration_service.migrations.versions.4e9c51686ff0_removed_password",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.716e88f2af17_initial_register",
        "description": "backend.registration_service.migrations.versions.716e88f2af17_initial_register",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users_register',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(length=150), nullable=False),\n    sa.Column('phone_number', sa.String(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "backend.registration_service.migrations.versions.716e88f2af17_initial_register",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.716e88f2af17_initial_register",
        "description": "backend.registration_service.migrations.versions.716e88f2af17_initial_register",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.INTEGER(), server_default=sa.text(\"nextval('users_id_seq'::regclass)\"), autoincrement=True, nullable=False),\n    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),\n    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=False),\n    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),\n    sa.PrimaryKeyConstraint('id', name='users_pkey'),\n    postgresql_ignore_search_path=False\n    )",
        "detail": "backend.registration_service.migrations.versions.716e88f2af17_initial_register",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.809eadfa6c19_added_email_password_2",
        "description": "backend.registration_service.migrations.versions.809eadfa6c19_added_email_password_2",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('users_register', 'email',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.alter_column('users_register', 'password',\n               existing_type=sa.VARCHAR(length=100),\n               nullable=True)\n    # ### end Alembic commands ###\ndef downgrade() -> None:",
        "detail": "backend.registration_service.migrations.versions.809eadfa6c19_added_email_password_2",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.809eadfa6c19_added_email_password_2",
        "description": "backend.registration_service.migrations.versions.809eadfa6c19_added_email_password_2",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('users_register', 'password',\n               existing_type=sa.VARCHAR(length=100),\n               nullable=True)\n    op.alter_column('users_register', 'email',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.create_table('user_tokens',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),",
        "detail": "backend.registration_service.migrations.versions.809eadfa6c19_added_email_password_2",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.d2eaa524e20e_added_email_password",
        "description": "backend.registration_service.migrations.versions.d2eaa524e20e_added_email_password",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users_register', sa.Column('email', sa.String(length=255), nullable=True))\n    op.add_column('users_register', sa.Column('password', sa.String(length=100), nullable=True))\n    op.create_index(op.f('ix_users_register_email'), 'users_register', ['email'], unique=True)\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_users_register_email'), table_name='users_register')\n    op.drop_column('users_register', 'password')",
        "detail": "backend.registration_service.migrations.versions.d2eaa524e20e_added_email_password",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.versions.d2eaa524e20e_added_email_password",
        "description": "backend.registration_service.migrations.versions.d2eaa524e20e_added_email_password",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_users_register_email'), table_name='users_register')\n    op.drop_column('users_register', 'password')\n    op.drop_column('users_register', 'email')\n    op.create_table('users',\n    sa.Column('id', sa.INTEGER(), server_default=sa.text(\"nextval('users_id_seq'::regclass)\"), autoincrement=True, nullable=False),\n    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),\n    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=False),\n    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),",
        "detail": "backend.registration_service.migrations.versions.d2eaa524e20e_added_email_password",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.env",
        "description": "backend.registration_service.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.registration_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.registration_service.migrations.env",
        "description": "backend.registration_service.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "backend.registration_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.registration_service.migrations.env",
        "description": "backend.registration_service.migrations.env",
        "peekOfCode": "config = context.config\nsection = config.config_ini_section\nconfig.set_section_option(section, \"DB_NAME\", DB_NAME)\nconfig.set_section_option(section, \"DB_PORT\", DB_PORT)\nconfig.set_section_option(section, \"DB_HOST\", DB_HOST)\nconfig.set_section_option(section, \"DB_USER\", DB_USER)\nconfig.set_section_option(section, \"DB_PASS\", DB_PASS)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:",
        "detail": "backend.registration_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "backend.registration_service.migrations.env",
        "description": "backend.registration_service.migrations.env",
        "peekOfCode": "section = config.config_ini_section\nconfig.set_section_option(section, \"DB_NAME\", DB_NAME)\nconfig.set_section_option(section, \"DB_PORT\", DB_PORT)\nconfig.set_section_option(section, \"DB_HOST\", DB_HOST)\nconfig.set_section_option(section, \"DB_USER\", DB_USER)\nconfig.set_section_option(section, \"DB_PASS\", DB_PASS)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "backend.registration_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "backend.registration_service.migrations.env",
        "description": "backend.registration_service.migrations.env",
        "peekOfCode": "target_metadata = metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "backend.registration_service.migrations.env",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "backend.registration_service.src.api.routes.user",
        "description": "backend.registration_service.src.api.routes.user",
        "peekOfCode": "user_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"Users\"],\n    responses={404: {\"description\": \"Not found\"}}\n)\n@user_router.post(\"\", status_code=status.HTTP_201_CREATED, response_model=UserResponse)\nasync def register_user(data: RegisterUserRequest, session: AsyncSession = Depends(get_async_session)):\n    try:\n        new_user = await user_utils.create_user_account(data, session)\n        return UserResponse(**new_user.to_dict())  ",
        "detail": "backend.registration_service.src.api.routes.user",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "backend.registration_service.src.api.schemas.base",
        "description": "backend.registration_service.src.api.schemas.base",
        "peekOfCode": "class BaseResponse(BaseModel):\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)",
        "detail": "backend.registration_service.src.api.schemas.base",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.registration_service.src.api.schemas.user",
        "description": "backend.registration_service.src.api.schemas.user",
        "peekOfCode": "class UserResponse(BaseResponse):\n    id: int\n    email: str\n    name: str\n    phone_number: str\n    created_at: Optional[str]\nclass RegisterUserRequest(BaseResponse):\n    name: str\n    email: EmailStr\n    password: str",
        "detail": "backend.registration_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "RegisterUserRequest",
        "kind": 6,
        "importPath": "backend.registration_service.src.api.schemas.user",
        "description": "backend.registration_service.src.api.schemas.user",
        "peekOfCode": "class RegisterUserRequest(BaseResponse):\n    name: str\n    email: EmailStr\n    password: str\n    phone_number: str\nclass VerifyUserRequest(BaseResponse):\n    token: str\n    email: str",
        "detail": "backend.registration_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "VerifyUserRequest",
        "kind": 6,
        "importPath": "backend.registration_service.src.api.schemas.user",
        "description": "backend.registration_service.src.api.schemas.user",
        "peekOfCode": "class VerifyUserRequest(BaseResponse):\n    token: str\n    email: str",
        "detail": "backend.registration_service.src.api.schemas.user",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.registration_service.src.core.config",
        "description": "backend.registration_service.src.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_NAME: str\n    DB_PORT: int\n    DB_HOST: str\n    DB_USER: str\n    DB_PASS: str\n    TEST_DB_NAME: str\n    TEST_DB_PORT: int\n    TEST_DB_HOST: str\n    TEST_DB_USER: str",
        "detail": "backend.registration_service.src.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "backend.registration_service.src.core.config",
        "description": "backend.registration_service.src.core.config",
        "peekOfCode": "def settings() -> Settings:\n    return Settings()",
        "detail": "backend.registration_service.src.core.config",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "def hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password) < 5:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password) < 5:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "is_password_strong_enough",
        "kind": 2,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "def is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password) < 5:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    if not any(char in SPECIAL_CHARACTERS for char in password):",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "str_encode",
        "kind": 2,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "def str_encode(string: str) -> str:\n    return base64.b85encode(string.encode('ascii').decode('ascii'))\ndef str_decode(string: str) -> str:\n    return base64.b85decode(string.encode('ascii').decode('ascii'))",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "str_decode",
        "kind": 2,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "def str_decode(string: str) -> str:\n    return base64.b85decode(string.encode('ascii').decode('ascii'))",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\nSPECIAL_CHARACTERS = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|', '~', '>']\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password) < 5:\n        return False",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\nSPECIAL_CHARACTERS = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|', '~', '>']\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password) < 5:\n        return False\n    if not any(char.isupper() for char in password):",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "SPECIAL_CHARACTERS",
        "kind": 5,
        "importPath": "backend.registration_service.src.core.security",
        "description": "backend.registration_service.src.core.security",
        "peekOfCode": "SPECIAL_CHARACTERS = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|', '~', '>']\ndef hash_password(password):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef is_password_strong_enough(password: str) -> bool:\n    \"\"\"if len(password) < 5:\n        return False\n    if not any(char.isupper() for char in password):\n        return False",
        "detail": "backend.registration_service.src.core.security",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "backend.registration_service.src.db.session",
        "description": "backend.registration_service.src.db.session",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\nmetadata = Base.metadata\nengine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.registration_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "backend.registration_service.src.db.session",
        "description": "backend.registration_service.src.db.session",
        "peekOfCode": "metadata = Base.metadata\nengine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.registration_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.registration_service.src.db.session",
        "description": "backend.registration_service.src.db.session",
        "peekOfCode": "engine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.registration_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "backend.registration_service.src.db.session",
        "description": "backend.registration_service.src.db.session",
        "peekOfCode": "async_session_maker = async_sessionmaker(engine, expire_on_commit=False)\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.registration_service.src.db.session",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.registration_service.src.models.user",
        "description": "backend.registration_service.src.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users_register\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(150), nullable=False)\n    phone_number = Column(String, nullable=False)\n    email = Column(String(255), unique=True, index=True, nullable=False)\n    created_at = Column(DateTime, nullable=False, server_default=func.now())\n    @classmethod\n    async def get_user_with_tokens(cls, session: AsyncSession, email: str):\n        stmt = select(cls).options(",
        "detail": "backend.registration_service.src.models.user",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "backend.registration_service.src.repositories.user_repository",
        "description": "backend.registration_service.src.repositories.user_repository",
        "peekOfCode": "class UserRepository:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n    async def get_user_by_phone(self, phone_number: str):\n        result = await self.session.execute(\n            select(UserSQLAlchemy).where(UserSQLAlchemy.phone_number == phone_number)\n        )\n        return result.scalars().first()\n    async def create_user(self, name: str, email: str, phone_number: str, hashed_password: str):\n        new_user = UserSQLAlchemy(",
        "detail": "backend.registration_service.src.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "backend.registration_service.src.services.user_service",
        "description": "backend.registration_service.src.services.user_service",
        "peekOfCode": "class UserService:\n    def __init__(self, session: AsyncSession):\n        self.session = session\n        self.user_repository = UserRepository(session)\n    async def register_user(self, data: RegisterUserRequest):\n        existing_user = await self.user_repository.get_user_by_phone(data.phone_number)\n        if existing_user:\n            raise HTTPException(status_code=400, detail=\"User with this phone number already exists.\")\n        hashed_password = hash_password(data.password)\n        new_user = await self.user_repository.create_user(",
        "detail": "backend.registration_service.src.services.user_service",
        "documentation": {}
    },
    {
        "label": "CustomJsonFormatter",
        "kind": 6,
        "importPath": "backend.registration_service.src.utils.logger",
        "description": "backend.registration_service.src.utils.logger",
        "peekOfCode": "class CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:\n            log_record[\"level\"] = record.levelname",
        "detail": "backend.registration_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.registration_service.src.utils.logger",
        "description": "backend.registration_service.src.utils.logger",
        "peekOfCode": "logger = logging.getLogger()\nlogHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()",
        "detail": "backend.registration_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logHandler",
        "kind": 5,
        "importPath": "backend.registration_service.src.utils.logger",
        "description": "backend.registration_service.src.utils.logger",
        "peekOfCode": "logHandler = logging.StreamHandler()\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get(\"timestamp\"):\n            now = datetime.utcnow().strftime(\"%Y-%m-%dY%H:%M:%S.%fZ\")\n            log_record[\"timestamp\"] = now\n        if log_record.get(\"level\"):\n            log_record[\"level\"] = log_record[\"level\"].upper()\n        else:",
        "detail": "backend.registration_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "backend.registration_service.src.utils.logger",
        "description": "backend.registration_service.src.utils.logger",
        "peekOfCode": "formatter = CustomJsonFormatter(\n    \"%(timestamp)s %(level)s %(message)s %(module)s %(funcName)s\"\n)\nlogHandler.setFormatter(formatter)\nlogger.addHandler(logHandler)\nlogger.setLevel(settings().LOG_LEVEL)",
        "detail": "backend.registration_service.src.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.registration_service.src.utils.user_utils",
        "description": "backend.registration_service.src.utils.user_utils",
        "peekOfCode": "logger = logging.getLogger('socketio')\nasync def create_user_account(data: RegisterUserRequest, session: AsyncSession):\n    existing_user = await session.execute(select(UserSQLAlchemy).where(UserSQLAlchemy.phone_number == data.phone_number))\n    existing_user = existing_user.scalars().first()\n    if existing_user:\n        raise HTTPException(status_code=400, detail=\"User with this phone number already exists.\")\n    new_user = UserSQLAlchemy(name=data.name, phone_number=data.phone_number, email=data.email)\n    session.add(new_user)\n    await session.commit()\n    await session.refresh(new_user)",
        "detail": "backend.registration_service.src.utils.user_utils",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "backend.registration_service.src.config_env",
        "description": "backend.registration_service.src.config_env",
        "peekOfCode": "DB_NAME = os.environ.get(\"POSTGRES_DB\")\nDB_PORT = os.environ.get(\"POSTGRES_PORT\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.registration_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "kind": 5,
        "importPath": "backend.registration_service.src.config_env",
        "description": "backend.registration_service.src.config_env",
        "peekOfCode": "DB_PORT = os.environ.get(\"POSTGRES_PORT\")\nDB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.registration_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "backend.registration_service.src.config_env",
        "description": "backend.registration_service.src.config_env",
        "peekOfCode": "DB_HOST = os.environ.get(\"POSTGRES_HOST\")\nDB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.registration_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "backend.registration_service.src.config_env",
        "description": "backend.registration_service.src.config_env",
        "peekOfCode": "DB_USER = os.environ.get(\"POSTGRES_USER\")\nDB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.registration_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "kind": 5,
        "importPath": "backend.registration_service.src.config_env",
        "description": "backend.registration_service.src.config_env",
        "peekOfCode": "DB_PASS = os.environ.get(\"POSTGRES_PASSWORD\")",
        "detail": "backend.registration_service.src.config_env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"MODE\"]",
        "kind": 5,
        "importPath": "backend.registration_service.src.conftest",
        "description": "backend.registration_service.src.conftest",
        "peekOfCode": "os.environ[\"MODE\"] = \"TEST\"",
        "detail": "backend.registration_service.src.conftest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.registration_service.src.main",
        "description": "backend.registration_service.src.main",
        "peekOfCode": "app = FastAPI()\norigins = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    \"http://localhost:8500\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "backend.registration_service.src.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.registration_service.src.main",
        "description": "backend.registration_service.src.main",
        "peekOfCode": "origins = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    \"http://localhost:8500\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "backend.registration_service.src.main",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "backend.registration_service.tests.conftest",
        "description": "backend.registration_service.tests.conftest",
        "peekOfCode": "def event_loop(request):\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"function\")\nasync def ac():\n    async with AsyncClient(app=fastapi_app, base_url=\"http://test\") as ac:\n        yield ac\n@pytest.fixture(scope=\"function\")\nasync def session():",
        "detail": "backend.registration_service.tests.conftest",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]